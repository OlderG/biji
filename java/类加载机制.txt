Java程序对类的使用方式可分为两种：--主动使用 --被动使用
所有的Java虚拟机实现必须在每个类或接口被Java程序“首次主动使用”时才初始化他们。

主动使用：
	-创建类的实例
	-访问某个类或接口的静态变量，后者对该静态变量赋值
	-调用类的静态方法
	-反射
	-初始化一个类的子类
	-Java虚拟机启动时被标明为启动类

类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆内创建一个
java.lang.Class对象，用来封装类在方法区的数据结构。

类的加载最终产品是位于堆区中Class对象。

Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。

有两种类型的类加载器
  -Java虚拟机自带的加载器
    .根加载器（Bootstrap），使用C++编写
    .扩展类加载器（Extension），使用Java代码实现
    .系统类加载器（System），使用Java代码实现
  -用户自定义的类加载器
    .java.lang.ClassLoader的子类
    .用户可以定制类的加载方式。

JVM规范允许类加载器在预料某个类将要被使用是预先加载它，如果在预先加载的过程中遇到了.class文件缺失，或存在错误
时才报告错误（LinkageError错误），如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。


类的验证：类被加载后，就进入连接阶段，连接就是将已经读入到内存的类的二进制数据合并到虚拟机的运行时环境中去。
类的验证的内容：-类文件的结构检测：确保类文件遵从Java类文件的固定格式
		-语义检查：确保类本身符合Java语言的语法规定
		-字节码验证
		-二进制兼容性的验证
类的准备：在准备阶段，Java虚拟机为类的静态变量分配内存，并设置默认的初始值。
类的解析：在解析阶段，Java虚拟机会把类的二进制数据的符号引用替换为直接引用。
类的初始化：在初始化阶段，Java虚拟机执行类的初始化语句，为类的静态变量赋予初始值，在程序中，静态变量的初始化有
两种途径：（1）在静态变量声明中初始化。（2）在静态代码块中进行初始化。
类的初始化步骤：（1）假如这个类还没有被加载和连接，那就先进行加载和连接。
		（2）假如类存在直接的父类，并且这个父类还没有被初始化，那就先初始化直接的父类
		（3）假如类中存在初始化语句，那就依次执行
类的初始化时机：当Java虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口
		   .在初始化一个类时，并不会先初始化它所实现的接口。
		   .在初始化一个接口时，并不会先初始化它的父接口。
		因此，一个父接口并不会因为子接口或者实现类的初始化而初始化，只有当程序首次使用特定接口的静态变量时，才会
 	        导致该接口的初始化。
		   .调用ClassLoader类的loadClass方法加载一个类，并不是对类的主动使用，不会导致类的初始化。
